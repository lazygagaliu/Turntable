{"version":3,"sources":["styles/GlobalStyles.js","styles/Theme.js","components/Roulette/index.js","components/Chip/index.js","components/Modal/index.js","App.js","styles/useTheme.js","serviceWorker.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","toggleBorder","background","darkTheme","light","keyframes","Rotate","styled","div","Light","Options","x","start","deg","css","Needle","options","useState","setStart","useRef","degForUpdate","onClick","n","current","length","Math","random","onAnimationEnd","Array","fill","map","_","i","key","style","transform","option","Chip","color","handleClick","Modal","Bg","Dialog","handleCloseModal","handleAdd","setOption","type","maxLength","value","onChange","e","target","Container","Wrapper","App","setTheme","setCode","code","window","localStorage","setItem","useLayoutEffect","localTheme","getItem","Number","useTheme","setOptions","openModal","setOpenModal","Roulette","concat","prev","filter","item","handleDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c85b36e0.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    font-size: 18px;\n    line-height: 24px;\n    letter-spacing: 3px;\n    transition: all 0.50s linear;\n  }\n\n  input, button {\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    font-size: 14px;\n    outline: none;\n    border-radius: 8px;\n  }\n\n  input {\n    padding: 8px;\n    border: 1px solid #999;\n  }\n\n  button {\n    width: fit-content;\n    max-width: 120px;\n    height: 28px;\n    border: none;\n    cursor: pointer;\n\n    &:hover {\n      background: navy;\n    }\n  }\n\n  *,\n  *:after,\n  *:before {\n    box-sizing: border-box;\n  }\n`","export const lightTheme = {\n  body: '#FFF',\n  text: '#363537',\n  toggleBorder: '#FFF',\n  background: '#363537'\n}\nexport const darkTheme = {\n  body: '#363537',\n  text: '#FAFAFA',\n  toggleBorder: '#6B8096',\n  background: '#999'\n}\n","import React, { useState, useRef } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\n\nconst rotate = x => keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(${x}deg);\n  }\n`\n\nconst light = keyframes`\n  from {\n    background: #eee;\n  }\n\n  to {\n    background: gold;\n  }\n`\n\nconst Rotate = styled.div`\n  background: steelblue;\n  width: 288px;\n  height: 288px;\n  position: relative;\n  margin-top: 30px;\n  border: 10px solid navy;\n  border-radius: 50%;\n  box-shadow: 0 0 20px navy;\n`\n\nconst Light = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  & div {\n    position: absolute;\n    width: 10px;\n    height: 100%;\n    left: 129px;\n    &:before,\n    :after {\n      content: '';\n      position: absolute;\n      top: -9px;\n      left: 2px;\n      margin: 0 auto;\n      width: 8px;\n      height: 8px;\n      border-radius: 50%;\n    }\n    &:nth-of-type(even):before {\n      background: #eee;\n      animation: ${light} 2s ease-in infinite;\n    }\n    &:nth-of-type(odd):before {\n      background: gold;\n      animation: ${light} 2s ease-in reverse infinite;\n    }\n  }\n`\n\nconst Options = styled.div`\n  position: absolute;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  animation: ${({ start, deg }) => {\n    if (start) {\n      return css`\n        ${rotate(deg)} 3s ease-out\n      `\n    } else {\n      return undefined\n    }\n  }};\n  & div {\n    position: absolute;\n    width: 100%;\n    height: 50%;\n    right: 50%;\n    transform-origin: 100% 100%;\n    &:nth-child(even) {\n      background: green;\n    }\n    &:nth-child(odd) {\n      background: steelblue;\n    }\n  }\n  & span {\n    position: absolute;\n    top: 40%;\n    right: 50%;\n    transform-origin: 100% 100%;\n    padding: 0 16px;\n    width: 144px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n`\n\nconst Needle = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 20px;\n  height: 20px;\n  background: #fff;\n  border-radius: 50%;\n  &:before {\n    content: '';\n    width: 15px;\n    height: 15px;\n    transform: rotate(45deg);\n    background: #fff;\n    position: absolute;\n    top: -8px;\n    left: 2.4px;\n  }\n`\n\nexport default ({options}) => {\n  const [start, setStart] = useState(0) \n  const deg = useRef(0)\n  const degForUpdate = useRef(0)\n\n  const getRandomDeg = n => Math.random() * 360 * n\n\n  return (\n    <Rotate\n      onClick={() => {\n        deg.current = getRandomDeg(options.length)\n        degForUpdate.current = 0\n        setStart(1)\n      }}\n      onAnimationEnd={() => {\n        degForUpdate.current = deg.current\n        if (start > 0) setStart(0)\n      }}\n    >\n      <Light>\n        {Array(18)\n          .fill()\n          .map((_, i) => (\n            <div\n              key={i}\n              style={{ transform: `rotate(${(360 / 18) * i}deg` }}\n            ></div>\n          ))}\n      </Light>\n      <Options start={start} deg={deg.current}>\n        {options.map((_, i) => (\n          <>\n            <div\n              key={i}\n              style={{\n                transform: `rotate(${\n                  (360 / options.length) * i + (degForUpdate.current % 360)\n                }deg) skew(${90 - 360 / options.length}deg)`\n              }}\n            ></div>\n          </>\n        ))}\n      </Options>\n      <Options start={start} deg={deg.current}>\n        {options.map((option, i) => (\n          <span\n            key={i}\n            style={{\n              transform: `rotate(${\n                (360 / options.length) * i + (degForUpdate.current % 360)\n              }deg)`\n            }}\n          >\n            {option}\n          </span>\n        ))}\n      </Options>\n      <Needle />\n    </Rotate>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nconst Chip = styled.div`\n  width: fit-content;\n  min-width: 120px;\n  height: 40px;\n  margin: 16px;\n  padding: 8px;\n  border-radius: 16px;\n  background: ${({color}) => color};\n  text-align: center;\n  font-weight: bold;\n  cursor: pointer;\n`\n\nexport default ({option, handleClick, color = 'pink'}) => {\n  return (\n    <Chip onClick={handleClick} color={color}>\n      {option}\n    </Chip>\n  )\n}","import React, {useState} from 'react'\nimport styled from 'styled-components'\n\nconst Modal = styled.div`\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst Bg = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(100, 100, 100, 0.7);\n`\n\nconst Dialog = styled.div`\n  width: 200px;\n  height: 180px;\n  background: #fff;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border-radius: 10px;\n  box-shadow: 0 0 8px #ccc;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n\n  & div {\n    font-size: 12px;\n    font-weight: bold;\n  }\n  & button {\n    color: #fff;\n    background: lightblue;\n  }\n`\n\nexport default ({ handleCloseModal, handleAdd }) => {\n  const [option, setOption] = useState('')\n  return (\n    <Modal>\n      <Bg onClick={handleCloseModal}></Bg>\n      <Dialog>\n        <div>Please add an option</div>\n        <input type='text' maxLength={20} value={option} onChange={e => { setOption(e.target.value) }} />\n        <button onClick={() => {\n          handleAdd(option)\n          setOption('')\n        }}>Add</button>\n        <button onClick={() => {\n          handleAdd(option)\n          setOption('')\n          handleCloseModal()\n        }}>Add and Close</button>\n      </Dialog>\n    </Modal>\n  )\n}","import React, { useState } from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { useTheme, GlobalStyles, lightTheme, darkTheme } from './styles'\nimport Roulette from './components/Roulette'\nimport Chip from './components/Chip'\nimport Modal from './components/Modal'\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.body};\n  max-width: 768px;\n  min-height: 100vh;\n  margin: 0 auto;\n  padding: 0 16px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Wrapper = styled.div`\n  width: 100%;\n  margin: 32px 0;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n`\n\nconst App = () => {\n  const [theme, themeToggler] = useTheme()\n  const [options, setOptions] = useState(['mala', 'goodeatmuch', 'fashionmeat', 'sevenwheels', 'stonetwo'])\n  const [openModal, setOpenModal] = useState(false)\n\n  const handleAdd = value => {\n    setOptions(prev => prev.concat(value))\n  }\n\n  const handleDelete = option => {\n    setOptions(prev => prev.filter(item => option !== item))\n  }\n\n  const handleCloseModal = () => {\n    setOpenModal(false)\n  }\n\n  return (\n    <ThemeProvider theme={theme === 0 ? darkTheme : lightTheme}>\n      <GlobalStyles />\n      <Container>\n        <Wrapper>\n          <Roulette options={options.length === 2 ? options.concat(options) : options.length % 2 !== 0 ? options.concat(['Try Again']) : options} />\n        </Wrapper>\n        <Wrapper>\n          {options.map((option, i) => (\n            <Chip key={i} option={option} handleClick={() => { handleDelete(option) }} />\n          ))}\n          <Chip\n            color='lightblue'\n            option='+++'\n            handleClick={() => {\n              setOpenModal(true)\n            }}\n          />\n        </Wrapper>\n      </Container>\n      {openModal && (\n        <Modal handleCloseModal={handleCloseModal} handleAdd={handleAdd} />\n      )}\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { useState, useLayoutEffect } from 'react'\n\nexport const useTheme = () => {\n  const [theme, setTheme] = useState(0)\n\n  const setCode = code => {\n    window.localStorage.setItem('spin_darkmode', code)\n    setTheme(code)\n  }\n\n  const themeToggler = () => {\n    theme === 0 ? setCode(1) : setCode(0)\n  }\n\n  useLayoutEffect(() => {\n    const localTheme = window.localStorage.getItem('spin_darkmode')\n    localTheme ? setTheme(Number(localTheme)) : setCode(0)\n  }, [])\n\n  return [theme, themeToggler]\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}